{"version":3,"sources":["components/List.jsx","components/withListLoading.jsx","App.js","reportWebVitals.js","index.js"],"names":["List","props","repos","pools","length","i","arrayOfRows","forEach","repo","Array","isArray","rarities","rarity","pool","find","p","id","collection","push","collectionId","schema","rarityId","rarity_id","value","one_asset_value","realValue","fraction","split","staked","wax","saleId","profit","months","refresh","arrayRef","useRef","countRef","useState","current","rows","setRows","count","setCount","getPriceById","a","price","axios","get","priceResponse","console","log","data","last_price","newArray","originalItem","z","body","error","post","response","map","itemN","amount","sale_id","humanize","units","round","Promise","resolve","reject","setTimeout","columns","field","headerName","width","type","renderCell","params","href","target","onClick","Icon","useEffect","item","getPrices","style","height","filter","row","sortModel","sort","WithListLoading","Component","isLoading","textAlign","fontSize","App","ListLoading","withListLoading","loading","appState","setAppState","code","index_position","json","key_type","limit","lower_bound","reverse","scope","show_payer","table","upper_bound","then","res","res2","className","role","aria-label","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cdc9a741.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\r\nimport axios from 'axios';\r\nimport humanize from 'humanize-duration';\r\n\r\nimport Icon from '@material-ui/core/Icon';\r\n\r\n\r\nimport { useAsync } from \"react-async\"\r\nimport { XGrid } from '@material-ui/x-grid';\r\nlet refreshTimeout = 1000;\r\n\r\nconst List = (props) => {\r\n    const { repos, pools } = props;\r\n    if (!repos || repos.length === 0) return <p>No repos, sorry</p>;\r\n    let i = 0;\r\n\r\n    const arrayOfRows = [];\r\n    if (pools) {\r\n        repos.forEach(repo => {\r\n            if(Array.isArray(repo.rarities) && repo.rarities.length > 0) {\r\n                repo.rarities.forEach(rarity => {\r\n                    i = i+1;\r\n                    const pool = pools.find((p)=> p.id === repo.collection);\r\n                    if(pool) {\r\n                        arrayOfRows.push({\r\n                            id: i,\r\n                            collectionId: repo.id,\r\n                            collection: repo.collection,\r\n                            rarity: rarity.rarity,\r\n                            schema: repo.schema,\r\n                            rarityId: repo.rarity_id,\r\n                            value: (+rarity.one_asset_value)/10000,\r\n                            realValue: (+rarity.one_asset_value)*1*((+pool.fraction.split(\" AETHER\")[0])/pool.staked),\r\n                            wax: 0,\r\n                            saleId: 0,\r\n                            profit: 0,\r\n                            months: 0,\r\n                            refresh: i,\r\n                        })\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    const arrayRef = useRef(arrayOfRows);\r\n    const counts = 0;\r\n    const countRef = useRef(counts);\r\n    const [rows, setRows] = useState(arrayRef.current);\r\n    const [count, setCount] = useState(countRef.current);\r\n\r\n    const getPriceById = async(id) => {\r\n        let priceResponse;\r\n        let price = 0;\r\n        try {\r\n            priceResponse = await axios.get('https://wax.alcor.exchange/api/markets/29');\r\n        } catch (err) {\r\n            console.log('error while load price')\r\n        }\r\n        if (priceResponse) {\r\n            price = priceResponse.data.last_price;\r\n        }\r\n        let newArray = [...arrayRef.current];\r\n        debugger;\r\n        let originalItem = newArray.find(z => z.id === id);\r\n        const body = {\r\n            \"state\":\"1\",\r\n            \"limit\":\"1\",\r\n            \"page\":\"1\",\r\n            \"order\":\"asc\",\r\n            \"sort\":\"price\",\r\n            \"symbol\":\"WAX\",\r\n            \"collection_name\": originalItem.collection,\r\n            [`data:text.${originalItem.rarityId}`]: originalItem.rarity,\r\n            \"schema_name\": originalItem.schema,\r\n            \"show_seller_contracts\":\"false\"\r\n        };\r\n        let response;\r\n        let error = false;\r\n        try {\r\n            response = await axios.post('https://wax.api.atomicassets.io/atomicmarket/v1/sales', body);\r\n            countRef.current += 1;\r\n            setCount(countRef.current+1);\r\n        } catch (err) {\r\n            error = true;\r\n            console.log('error while load price')\r\n        }\r\n        if (!error) {\r\n            newArray = newArray.map((itemN) => {\r\n                if (id === itemN.id) {\r\n                    const wax = response.data.data && response.data.data.length ? +response.data.data[0].price.amount / 100000000 : 0;\r\n                    const saleId = response.data.data && response.data.data.length ? response.data.data[0].sale_id: 0;\r\n                    const profit= wax / originalItem.realValue;\r\n                    const months = price ? humanize((wax/price/originalItem.realValue) * 3600000, { units: [\"y\", \"mo\", \"d\", \"h\"], round: true }) : 0;\r\n                    return {...itemN,\r\n                        wax,\r\n                        saleId,\r\n                        profit,\r\n                        months\r\n                    }\r\n                }\r\n                return itemN;\r\n            });\r\n            arrayRef.current = [...newArray];\r\n            setRows([...newArray]);\r\n        }\r\n        await new Promise((resolve, reject)=> {setTimeout(resolve, refreshTimeout)});\r\n    }\r\n\r\n    const columns = [\r\n        { field: 'id', headerName: 'ID', width: 70 },\r\n        { field: 'collectionId', headerName: 'Collection Id', width: 200 },\r\n        { field: 'collection', headerName: 'collection', width: 200 },\r\n        { field: 'rarity', headerName: 'Rarity', width: 200 },\r\n        { field: 'rarityId', headerName: 'Rarity ID', width: 200 },\r\n        { field: 'schema', headerName: 'Schema', width: 150 },\r\n        { field: 'value', headerName: 'Value', width: 120, type: 'number' },\r\n        { field: 'realValue', headerName: 'RealValue', width: 150, type: 'number' },\r\n        { field: 'wax', headerName: 'Wax', width: 120, type: 'number' },\r\n        { field: 'saleId', headerName: 'SaleId', renderCell: (params) => (\r\n                <a href={`https://wax.atomichub.io/market/sale/${params.value}`} target=\"_blank\">{params.value}</a>\r\n            ), width: 150 },\r\n        { field: 'profit', headerName: 'AE/WAX', width: 150, type: 'number' },\r\n        { field: 'months', headerName: 'Months', width: 300, type: 'number' },\r\n        { field: 'refresh', headerName: 'Refresh', renderCell: (params) => (\r\n                <button onClick={() => getPriceById(params.value)}><Icon>refresh</Icon></button>\r\n            ), width: 150 },\r\n    ];\r\n\r\n    useEffect(()=>{\r\n\r\n        const getPrices = async() => {\r\n            let priceResponse;\r\n            let price = 0;\r\n            try {\r\n                priceResponse = await axios.get('https://wax.alcor.exchange/api/markets/29');\r\n            } catch (err) {\r\n                console.log('error while load price')\r\n            }\r\n            if (priceResponse) {\r\n                price = priceResponse.data.last_price;\r\n            }\r\n            for ( let item of arrayOfRows) {\r\n                let newArray = [...arrayRef.current];\r\n                let originalItem = newArray.find(z => z.id === item.id);\r\n                const body = {\r\n                    \"state\":\"1\",\r\n                    \"limit\":\"1\",\r\n                    \"page\":\"1\",\r\n                    \"order\":\"asc\",\r\n                    \"sort\":\"price\",\r\n                    \"symbol\":\"WAX\",\r\n                    \"collection_name\": originalItem.collection,\r\n                    [`data:text.${item.rarityId}`]: originalItem.rarity,\r\n                    \"schema_name\": originalItem.schema,\r\n                    \"show_seller_contracts\":\"false\"\r\n                };\r\n                let response;\r\n                let error = false;\r\n                try {\r\n                    response = await axios.post('https://wax.api.atomicassets.io/atomicmarket/v1/sales', body);\r\n                    countRef.current += 1;\r\n                    setCount(countRef.current+1);\r\n                } catch (err) {\r\n                    error = true;\r\n                    console.log('error while load price')\r\n                }\r\n                if (!error) {\r\n                    newArray = newArray.map((itemN) => {\r\n                        if (item.id === itemN.id) {\r\n                            const wax = response.data.data && response.data.data.length ? +response.data.data[0].price.amount / 100000000 : 0;\r\n                            const saleId = response.data.data && response.data.data.length ? response.data.data[0].sale_id: 0;\r\n                            const profit= wax / originalItem.realValue;\r\n                            const months = price ? humanize((wax/price/originalItem.realValue) * 3600000, { units: [\"y\", \"mo\", \"d\", \"h\"], round: true }) : 0;\r\n                            return {...itemN,\r\n                                wax,\r\n                                saleId,\r\n                                profit,\r\n                                months\r\n                            }\r\n                        }\r\n                        return itemN;\r\n                    });\r\n                    arrayRef.current = [...newArray];\r\n                    setRows([...newArray]);\r\n                }\r\n                await new Promise((resolve, reject)=> {setTimeout(resolve, refreshTimeout)});\r\n            }\r\n        }\r\n        getPrices();\r\n    }, []);\r\n    console.log(rows);\r\n    return (\r\n        <div>\r\n            {count} / {arrayOfRows.length}\r\n            <div style={{ height: '100vh', width: '100%' }}>\r\n                <XGrid rows={rows.filter((row)=>{return row.profit > 0})} columns={columns} sortModel={[\r\n                    {\r\n                        field: 'profit',\r\n                        sort: 'asc',\r\n                    },\r\n                ]} />\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\nexport default List;\r\n","import React from 'react';\r\n\r\nfunction WithListLoading(Component) {\r\n    return function WihLoadingComponent({ isLoading, ...props }) {\r\n        if (!isLoading) return <Component {...props} />;\r\n        return (\r\n            <p style={{ textAlign: 'center', fontSize: '30px' }}>\r\n                Hold on, fetching data may take some time :)\r\n            </p>\r\n        );\r\n    };\r\n}\r\nexport default WithListLoading;\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport List from './components/List';\nimport withListLoading from './components/withListLoading';\nimport axios from \"axios\";\nfunction App() {\n  const ListLoading = withListLoading(List);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    pools: null,\n  });\n\n  useEffect(() => {\n    setAppState({ loading: true });\n        const response = axios.post('https://chain.wax.io/v1/chain/get_table_rows', {\n            code: \"s.rplanet\",\n            index_position: 1,\n            json: true,\n            key_type: \"i64\",\n            limit: 1000,\n            lower_bound: \"\",\n            reverse: false,\n            scope: \"s.rplanet\",\n            show_payer: false,\n            table: \"collections\",\n            upper_bound: \"\"\n        }).then((res) =>  {\n            const pools = axios.post('https://chain.wax.io/v1/chain/get_table_rows', {\n                code: \"s.rplanet\",\n                index_position: 1,\n                json: true,\n                key_type: \"i64\",\n                limit: 1000,\n                lower_bound: \"\",\n                reverse: false,\n                scope: \"s.rplanet\",\n                show_payer: false,\n                table: \"pools\",\n                upper_bound: \"\"\n            }) .then((res2) =>  setAppState({ loading: false, repos: res.data.rows, pools: res2.data.rows }))\n        });\n\n  }, [setAppState]);\n  return (\n      <div className='App'>\n        <div className='repo-container'>\n          <ListLoading isLoading={appState.loading} repos={appState.repos} pools={appState.pools} />\n        </div>\n        <footer>\n          <div className='footer'>\n            Built{' '}\n            <span role='img' aria-label='love'>\n            💚\n          </span>{' '}\n          </div>\n        </footer>\n      </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}