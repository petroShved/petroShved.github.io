{"version":3,"sources":["components/List.jsx","components/withListLoading.jsx","App.js","reportWebVitals.js","index.js"],"names":["List","props","repos","length","columns","field","headerName","width","type","renderCell","params","href","value","target","style","height","rows","filter","row","profit","sortModel","sort","WithListLoading","Component","isLoading","textAlign","fontSize","App","ListLoading","withListLoading","useState","loading","appState","setAppState","useEffect","axios","get","then","res","data","className","pools","role","aria-label","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQA+CeA,EApCF,SAACC,GACV,IAAQC,EAAUD,EAAVC,MACR,IAAKA,GAA0B,IAAjBA,EAAMC,OAAc,OAAO,gDAEzC,IAAMC,EAAU,CACZ,CAAEC,MAAO,KAAMC,WAAY,KAAMC,MAAO,IACxC,CAAEF,MAAO,eAAgBC,WAAY,gBAAiBC,MAAO,KAC7D,CAAEF,MAAO,aAAcC,WAAY,aAAcC,MAAO,KACxD,CAAEF,MAAO,SAAUC,WAAY,SAAUC,MAAO,KAChD,CAAEF,MAAO,WAAYC,WAAY,YAAaC,MAAO,KACrD,CAAEF,MAAO,SAAUC,WAAY,SAAUC,MAAO,KAChD,CAAEF,MAAO,QAASC,WAAY,QAASC,MAAO,IAAKC,KAAM,UACzD,CAAEH,MAAO,YAAaC,WAAY,YAAaC,MAAO,IAAKC,KAAM,UACjE,CAAEH,MAAO,MAAOC,WAAY,MAAOC,MAAO,IAAKC,KAAM,UACrD,CAAEH,MAAO,SAAUC,WAAY,SAAUG,WAAY,SAACC,GAAD,OAC7C,mBAAGC,KAAI,+CAA0CD,EAAOE,OAASC,OAAO,SAAxE,SAAkFH,EAAOE,SAC1FL,MAAO,KACd,CAAEF,MAAO,SAAUC,WAAY,SAAUC,MAAO,IAAKC,KAAM,UAC3D,CAAEH,MAAO,SAAUC,WAAY,SAAUC,MAAO,IAAKC,KAAM,WAI/D,OACI,8BACI,qBAAKM,MAAO,CAAEC,OAAQ,QAASR,MAAO,QAAtC,SACI,cAAC,IAAD,CAAOS,KAAMd,EAAMe,QAAO,SAACC,GAAO,OAAOA,EAAIC,OAAS,KAAKf,QAASA,EAASgB,UAAW,CACpF,CACIf,MAAO,SACPgB,KAAM,e,kCC3BfC,MAVf,SAAyBC,GACrB,OAAO,YAAuD,IAAxBC,EAAuB,EAAvBA,UAAcvB,EAAS,iBACzD,OAAKuB,EAED,mBAAGV,MAAO,CAAEW,UAAW,SAAUC,SAAU,QAA3C,0DAFmB,cAACH,EAAD,eAAetB,MC+B/B0B,MA9Bf,WACE,IAAMC,EAAcC,EAAgB7B,GACpC,EAAgC8B,mBAAS,CACvCC,SAAS,EACT7B,MAAO,OAFT,mBAAO8B,EAAP,KAAiBC,EAAjB,KAYA,OAPAC,qBAAU,WACRD,EAAY,CAAEF,SAAS,IACFI,IAAMC,IAAI,wBAAwBC,MAAK,SAACC,GACrDL,EAAY,CAAEF,SAAS,EAAO7B,MAAOoC,EAAIC,YAGhD,CAACN,IAEA,sBAAKO,UAAU,MAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,cAACZ,EAAD,CAAaJ,UAAWQ,EAASD,QAAS7B,MAAO8B,EAAS9B,MAAOuC,MAAOT,EAASS,UAEnF,iCACE,sBAAKD,UAAU,SAAf,kBACQ,IACN,sBAAME,KAAK,MAAMC,aAAW,OAA5B,0BAEM,aCjBHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.abdada9c.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\r\nimport axios from 'axios';\r\nimport humanize from 'humanize-duration';\r\n\r\nimport Icon from '@material-ui/core/Icon';\r\n\r\n\r\nimport { useAsync } from \"react-async\"\r\nimport { XGrid } from '@material-ui/x-grid';\r\nlet refreshTimeout = 1000;\r\n\r\nconst List = (props) => {\r\n    const { repos } = props;\r\n    if (!repos || repos.length === 0) return <p>No repos, sorry</p>;\r\n\r\n    const columns = [\r\n        { field: 'id', headerName: 'ID', width: 70 },\r\n        { field: 'collectionId', headerName: 'Collection Id', width: 200 },\r\n        { field: 'collection', headerName: 'collection', width: 200 },\r\n        { field: 'rarity', headerName: 'Rarity', width: 200 },\r\n        { field: 'rarityId', headerName: 'Rarity ID', width: 200 },\r\n        { field: 'schema', headerName: 'Schema', width: 150 },\r\n        { field: 'value', headerName: 'Value', width: 120, type: 'number' },\r\n        { field: 'realValue', headerName: 'RealValue', width: 150, type: 'number' },\r\n        { field: 'wax', headerName: 'Wax', width: 120, type: 'number' },\r\n        { field: 'saleId', headerName: 'SaleId', renderCell: (params) => (\r\n                <a href={`https://wax.atomichub.io/market/sale/${params.value}`} target=\"_blank\">{params.value}</a>\r\n            ), width: 150 },\r\n        { field: 'profit', headerName: 'AE/WAX', width: 150, type: 'number' },\r\n        { field: 'months', headerName: 'Months', width: 300, type: 'number' },\r\n    ];\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div style={{ height: '100vh', width: '100%' }}>\r\n                <XGrid rows={repos.filter((row)=>{return row.profit > 0})} columns={columns} sortModel={[\r\n                    {\r\n                        field: 'profit',\r\n                        sort: 'asc',\r\n                    },\r\n                ]} />\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\nexport default List;\r\n","import React from 'react';\r\n\r\nfunction WithListLoading(Component) {\r\n    return function WihLoadingComponent({ isLoading, ...props }) {\r\n        if (!isLoading) return <Component {...props} />;\r\n        return (\r\n            <p style={{ textAlign: 'center', fontSize: '30px' }}>\r\n                Hold on, fetching data may take some time :)\r\n            </p>\r\n        );\r\n    };\r\n}\r\nexport default WithListLoading;\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport List from './components/List';\nimport withListLoading from './components/withListLoading';\nimport axios from \"axios\";\nfunction App() {\n  const ListLoading = withListLoading(List);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n  });\n\n  useEffect(() => {\n    setAppState({ loading: true });\n        const response = axios.get('http://68.183.73.24/').then((res) =>  {\n            setAppState({ loading: false, repos: res.data})\n        });\n\n  }, [setAppState]);\n  return (\n      <div className='App'>\n        <div className='repo-container'>\n          <ListLoading isLoading={appState.loading} repos={appState.repos} pools={appState.pools} />\n        </div>\n        <footer>\n          <div className='footer'>\n            Built{' '}\n            <span role='img' aria-label='love'>\n            ðŸ’š\n          </span>{' '}\n          </div>\n        </footer>\n      </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}